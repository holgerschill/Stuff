/*
* generated by Xtext
*/
package org.eclipse.eclipsecon.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.eclipsecon.services.ConferenceGrammarAccess;

public class ConferenceParser extends AbstractContentAssistParser {
	
	@Inject
	private ConferenceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalConferenceParser createParser() {
		org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalConferenceParser result = new org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalConferenceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConferenceAccess().getGroup(), "rule__Conference__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getTalkAccess().getGroup(), "rule__Talk__Group__0");
					put(grammarAccess.getTalkAccess().getGroup_5(), "rule__Talk__Group_5__0");
					put(grammarAccess.getTalkAccess().getGroup_10(), "rule__Talk__Group_10__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getFQNWithWildcardAccess().getGroup(), "rule__FQNWithWildcard__Group__0");
					put(grammarAccess.getConferenceAccess().getNameAssignment_1(), "rule__Conference__NameAssignment_1");
					put(grammarAccess.getConferenceAccess().getImportsAssignment_3(), "rule__Conference__ImportsAssignment_3");
					put(grammarAccess.getConferenceAccess().getLocationAssignment_4(), "rule__Conference__LocationAssignment_4");
					put(grammarAccess.getConferenceAccess().getTalksAssignment_5(), "rule__Conference__TalksAssignment_5");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getTalkAccess().getNameAssignment_1(), "rule__Talk__NameAssignment_1");
					put(grammarAccess.getTalkAccess().getSpeakersAssignment_4(), "rule__Talk__SpeakersAssignment_4");
					put(grammarAccess.getTalkAccess().getSpeakersAssignment_5_1(), "rule__Talk__SpeakersAssignment_5_1");
					put(grammarAccess.getTalkAccess().getRoomAssignment_7(), "rule__Talk__RoomAssignment_7");
					put(grammarAccess.getTalkAccess().getToolsAssignment_9(), "rule__Talk__ToolsAssignment_9");
					put(grammarAccess.getTalkAccess().getToolsAssignment_10_1(), "rule__Talk__ToolsAssignment_10_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalConferenceParser typedParser = (org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalConferenceParser) parser;
			typedParser.entryRuleConference();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ConferenceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ConferenceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
