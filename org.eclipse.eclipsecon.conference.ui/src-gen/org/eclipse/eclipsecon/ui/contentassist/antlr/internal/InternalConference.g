/*
* generated by Xtext
*/
grammar InternalConference;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.eclipsecon.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.eclipsecon.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.eclipsecon.services.ConferenceGrammarAccess;

}

@parser::members {
 
 	private ConferenceGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ConferenceGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleConference
entryRuleConference 
:
{ before(grammarAccess.getConferenceRule()); }
	 ruleConference
{ after(grammarAccess.getConferenceRule()); } 
	 EOF 
;

// Rule Conference
ruleConference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConferenceAccess().getGroup()); }
(rule__Conference__Group__0)
{ after(grammarAccess.getConferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTalk
entryRuleTalk 
:
{ before(grammarAccess.getTalkRule()); }
	 ruleTalk
{ after(grammarAccess.getTalkRule()); } 
	 EOF 
;

// Rule Talk
ruleTalk
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTalkAccess().getGroup()); }
(rule__Talk__Group__0)
{ after(grammarAccess.getTalkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQNWithWildcard
entryRuleFQNWithWildcard 
:
{ before(grammarAccess.getFQNWithWildcardRule()); }
	 ruleFQNWithWildcard
{ after(grammarAccess.getFQNWithWildcardRule()); } 
	 EOF 
;

// Rule FQNWithWildcard
ruleFQNWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNWithWildcardAccess().getGroup()); }
(rule__FQNWithWildcard__Group__0)
{ after(grammarAccess.getFQNWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conference__Group__0__Impl
	rule__Conference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getConferenceKeyword_0()); }

	'conference' 

{ after(grammarAccess.getConferenceAccess().getConferenceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conference__Group__1__Impl
	rule__Conference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getNameAssignment_1()); }
(rule__Conference__NameAssignment_1)
{ after(grammarAccess.getConferenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conference__Group__2__Impl
	rule__Conference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getConferenceAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conference__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conference__Group__3__Impl
	rule__Conference__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getImportsAssignment_3()); }
(rule__Conference__ImportsAssignment_3)*
{ after(grammarAccess.getConferenceAccess().getImportsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conference__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conference__Group__4__Impl
	rule__Conference__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getLocationAssignment_4()); }
(rule__Conference__LocationAssignment_4)
{ after(grammarAccess.getConferenceAccess().getLocationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conference__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conference__Group__5__Impl
	rule__Conference__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getTalksAssignment_5()); }
(rule__Conference__TalksAssignment_5)*
{ after(grammarAccess.getConferenceAccess().getTalksAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conference__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conference__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getConferenceAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Talk__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__0__Impl
	rule__Talk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getTalkKeyword_0()); }

	'talk' 

{ after(grammarAccess.getTalkAccess().getTalkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__1__Impl
	rule__Talk__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getNameAssignment_1()); }
(rule__Talk__NameAssignment_1)
{ after(grammarAccess.getTalkAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__2__Impl
	rule__Talk__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getTalkAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__3__Impl
	rule__Talk__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getSpeakerKeyword_3()); }

	'speaker' 

{ after(grammarAccess.getTalkAccess().getSpeakerKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__4__Impl
	rule__Talk__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getSpeakersAssignment_4()); }
(rule__Talk__SpeakersAssignment_4)
{ after(grammarAccess.getTalkAccess().getSpeakersAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__5__Impl
	rule__Talk__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getGroup_5()); }
(rule__Talk__Group_5__0)*
{ after(grammarAccess.getTalkAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__6__Impl
	rule__Talk__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getRoomKeyword_6()); }

	'room' 

{ after(grammarAccess.getTalkAccess().getRoomKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__7__Impl
	rule__Talk__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getRoomAssignment_7()); }
(rule__Talk__RoomAssignment_7)
{ after(grammarAccess.getTalkAccess().getRoomAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__8__Impl
	rule__Talk__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getToolsKeyword_8()); }

	'tools' 

{ after(grammarAccess.getTalkAccess().getToolsKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__9__Impl
	rule__Talk__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getToolsAssignment_9()); }
(rule__Talk__ToolsAssignment_9)
{ after(grammarAccess.getTalkAccess().getToolsAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__10__Impl
	rule__Talk__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getGroup_10()); }
(rule__Talk__Group_10__0)*
{ after(grammarAccess.getTalkAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getRightCurlyBracketKeyword_11()); }

	'}' 

{ after(grammarAccess.getTalkAccess().getRightCurlyBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__Talk__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group_5__0__Impl
	rule__Talk__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getTalkAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getSpeakersAssignment_5_1()); }
(rule__Talk__SpeakersAssignment_5_1)
{ after(grammarAccess.getTalkAccess().getSpeakersAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Talk__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group_10__0__Impl
	rule__Talk__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getCommaKeyword_10_0()); }

	',' 

{ after(grammarAccess.getTalkAccess().getCommaKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Talk__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Talk__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getToolsAssignment_10_1()); }
(rule__Talk__ToolsAssignment_10_1)
{ after(grammarAccess.getTalkAccess().getToolsAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQNWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQNWithWildcard__Group__0__Impl
	rule__FQNWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQNWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNWithWildcardAccess().getFQNParserRuleCall_0()); }
	ruleFQN
{ after(grammarAccess.getFQNWithWildcardAccess().getFQNParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQNWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQNWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQNWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getFQNWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Conference__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConferenceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__ImportsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getImportsImportParserRuleCall_3_0()); }
	ruleImport{ after(grammarAccess.getConferenceAccess().getImportsImportParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__LocationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getLocationLocationCrossReference_4_0()); }
(
{ before(grammarAccess.getConferenceAccess().getLocationLocationFQNParserRuleCall_4_0_1()); }
	ruleFQN{ after(grammarAccess.getConferenceAccess().getLocationLocationFQNParserRuleCall_4_0_1()); }
)
{ after(grammarAccess.getConferenceAccess().getLocationLocationCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conference__TalksAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConferenceAccess().getTalksTalkParserRuleCall_5_0()); }
	ruleTalk{ after(grammarAccess.getConferenceAccess().getTalksTalkParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceFQNWithWildcardParserRuleCall_1_0()); }
	ruleFQNWithWildcard{ after(grammarAccess.getImportAccess().getImportedNamespaceFQNWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTalkAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__SpeakersAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getSpeakersSpeakerCrossReference_4_0()); }
(
{ before(grammarAccess.getTalkAccess().getSpeakersSpeakerFQNParserRuleCall_4_0_1()); }
	ruleFQN{ after(grammarAccess.getTalkAccess().getSpeakersSpeakerFQNParserRuleCall_4_0_1()); }
)
{ after(grammarAccess.getTalkAccess().getSpeakersSpeakerCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__SpeakersAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getSpeakersSpeakerCrossReference_5_1_0()); }
(
{ before(grammarAccess.getTalkAccess().getSpeakersSpeakerFQNParserRuleCall_5_1_0_1()); }
	ruleFQN{ after(grammarAccess.getTalkAccess().getSpeakersSpeakerFQNParserRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getTalkAccess().getSpeakersSpeakerCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__RoomAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getRoomRoomCrossReference_7_0()); }
(
{ before(grammarAccess.getTalkAccess().getRoomRoomFQNParserRuleCall_7_0_1()); }
	ruleFQN{ after(grammarAccess.getTalkAccess().getRoomRoomFQNParserRuleCall_7_0_1()); }
)
{ after(grammarAccess.getTalkAccess().getRoomRoomCrossReference_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__ToolsAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getToolsToolCrossReference_9_0()); }
(
{ before(grammarAccess.getTalkAccess().getToolsToolFQNParserRuleCall_9_0_1()); }
	ruleFQN{ after(grammarAccess.getTalkAccess().getToolsToolFQNParserRuleCall_9_0_1()); }
)
{ after(grammarAccess.getTalkAccess().getToolsToolCrossReference_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Talk__ToolsAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTalkAccess().getToolsToolCrossReference_10_1_0()); }
(
{ before(grammarAccess.getTalkAccess().getToolsToolFQNParserRuleCall_10_1_0_1()); }
	ruleFQN{ after(grammarAccess.getTalkAccess().getToolsToolFQNParserRuleCall_10_1_0_1()); }
)
{ after(grammarAccess.getTalkAccess().getToolsToolCrossReference_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


