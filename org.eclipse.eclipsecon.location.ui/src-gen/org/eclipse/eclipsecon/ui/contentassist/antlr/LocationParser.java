/*
* generated by Xtext
*/
package org.eclipse.eclipsecon.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.eclipsecon.services.LocationGrammarAccess;

public class LocationParser extends AbstractContentAssistParser {
	
	@Inject
	private LocationGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalLocationParser createParser() {
		org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalLocationParser result = new org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalLocationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLocationElementAccess().getAlternatives(), "rule__LocationElement__Alternatives");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getLocationAccess().getGroup(), "rule__Location__Group__0");
					put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
					put(grammarAccess.getToolAccess().getGroup(), "rule__Tool__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
					put(grammarAccess.getPackageAccess().getLocationsAssignment_2(), "rule__Package__LocationsAssignment_2");
					put(grammarAccess.getLocationAccess().getNameAssignment_1(), "rule__Location__NameAssignment_1");
					put(grammarAccess.getLocationAccess().getElementsAssignment_3(), "rule__Location__ElementsAssignment_3");
					put(grammarAccess.getRoomAccess().getNameAssignment_1(), "rule__Room__NameAssignment_1");
					put(grammarAccess.getToolAccess().getNameAssignment_1(), "rule__Tool__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalLocationParser typedParser = (org.eclipse.eclipsecon.ui.contentassist.antlr.internal.InternalLocationParser) parser;
			typedParser.entryRulePackage();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LocationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LocationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
