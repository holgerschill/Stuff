/*
* generated by Xtext
*/
grammar InternalConference;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.eclipsecon.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.eclipsecon.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.eclipsecon.services.ConferenceGrammarAccess;

}

@parser::members {

 	private ConferenceGrammarAccess grammarAccess;
 	
    public InternalConferenceParser(TokenStream input, ConferenceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Conference";	
   	}
   	
   	@Override
   	protected ConferenceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConference
entryRuleConference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConferenceRule()); }
	 iv_ruleConference=ruleConference 
	 { $current=$iv_ruleConference.current; } 
	 EOF 
;

// Rule Conference
ruleConference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='conference' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConferenceAccess().getConferenceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConferenceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConferenceAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConferenceAccess().getImportsImportParserRuleCall_3_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConferenceRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConferenceAccess().getLocationLocationCrossReference_4_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConferenceAccess().getTalksTalkParserRuleCall_5_0()); 
	    }
		lv_talks_5_0=ruleTalk		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConferenceRule());
	        }
       		add(
       			$current, 
       			"talks",
        		lv_talks_5_0, 
        		"Talk");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConferenceAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceFQNWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleFQNWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"FQNWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTalk
entryRuleTalk returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTalkRule()); }
	 iv_ruleTalk=ruleTalk 
	 { $current=$iv_ruleTalk.current; } 
	 EOF 
;

// Rule Talk
ruleTalk returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='talk' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTalkAccess().getTalkKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTalkAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTalkAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='speaker' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTalkAccess().getSpeakerKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTalkAccess().getSpeakersSpeakerCrossReference_4_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTalkAccess().getCommaKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTalkAccess().getSpeakersSpeakerCrossReference_5_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='room' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTalkAccess().getRoomKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTalkAccess().getRoomRoomCrossReference_7_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='tools' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTalkAccess().getToolsKeyword_8());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTalkAccess().getToolsToolCrossReference_9_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTalkAccess().getCommaKeyword_10_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTalkAccess().getToolsToolCrossReference_10_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTalkAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleFQNWithWildcard
entryRuleFQNWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNWithWildcardRule()); } 
	 iv_ruleFQNWithWildcard=ruleFQNWithWildcard 
	 { $current=$iv_ruleFQNWithWildcard.current.getText(); }  
	 EOF 
;

// Rule FQNWithWildcard
ruleFQNWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFQNWithWildcardAccess().getFQNParserRuleCall_0()); 
    }
    this_FQN_0=ruleFQN    {
		$current.merge(this_FQN_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


