/*
* generated by Xtext
*/
package org.eclipse.eclipsecon.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ConferenceGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLocationLocationCrossReference_4_0 = (CrossReference)cLocationAssignment_4.eContents().get(0);
		private final RuleCall cLocationLocationFQNParserRuleCall_4_0_1 = (RuleCall)cLocationLocationCrossReference_4_0.eContents().get(1);
		private final Assignment cTalksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTalksTalkParserRuleCall_5_0 = (RuleCall)cTalksAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Conference:
		//	"conference" name=ID "{" imports+=Import* location=[Location|FQN] talks+=Talk* "}";
		public ParserRule getRule() { return rule; }

		//"conference" name=ID "{" imports+=Import* location=[Location|FQN] talks+=Talk* "}"
		public Group getGroup() { return cGroup; }

		//"conference"
		public Keyword getConferenceKeyword_0() { return cConferenceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//location=[Location|FQN]
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }

		//[Location|FQN]
		public CrossReference getLocationLocationCrossReference_4_0() { return cLocationLocationCrossReference_4_0; }

		//FQN
		public RuleCall getLocationLocationFQNParserRuleCall_4_0_1() { return cLocationLocationFQNParserRuleCall_4_0_1; }

		//talks+=Talk*
		public Assignment getTalksAssignment_5() { return cTalksAssignment_5; }

		//Talk
		public RuleCall getTalksTalkParserRuleCall_5_0() { return cTalksTalkParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceFQNWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=FQNWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=FQNWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=FQNWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//FQNWithWildcard
		public RuleCall getImportedNamespaceFQNWithWildcardParserRuleCall_1_0() { return cImportedNamespaceFQNWithWildcardParserRuleCall_1_0; }
	}

	public class TalkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Talk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTalkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSpeakerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpeakersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSpeakersSpeakerCrossReference_4_0 = (CrossReference)cSpeakersAssignment_4.eContents().get(0);
		private final RuleCall cSpeakersSpeakerFQNParserRuleCall_4_0_1 = (RuleCall)cSpeakersSpeakerCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSpeakersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSpeakersSpeakerCrossReference_5_1_0 = (CrossReference)cSpeakersAssignment_5_1.eContents().get(0);
		private final RuleCall cSpeakersSpeakerFQNParserRuleCall_5_1_0_1 = (RuleCall)cSpeakersSpeakerCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRoomKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRoomAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cRoomRoomCrossReference_7_0 = (CrossReference)cRoomAssignment_7.eContents().get(0);
		private final RuleCall cRoomRoomFQNParserRuleCall_7_0_1 = (RuleCall)cRoomRoomCrossReference_7_0.eContents().get(1);
		private final Keyword cToolsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cToolsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cToolsToolCrossReference_9_0 = (CrossReference)cToolsAssignment_9.eContents().get(0);
		private final RuleCall cToolsToolFQNParserRuleCall_9_0_1 = (RuleCall)cToolsToolCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cToolsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cToolsToolCrossReference_10_1_0 = (CrossReference)cToolsAssignment_10_1.eContents().get(0);
		private final RuleCall cToolsToolFQNParserRuleCall_10_1_0_1 = (RuleCall)cToolsToolCrossReference_10_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Talk:
		//	"talk" name=ID "{" "speaker" speakers+=[Speaker|FQN] ("," speakers+=[Speaker|FQN])* "room" room=[Room|FQN] "tools"
		//	tools+=[Tool|FQN] ("," tools+=[Tool|FQN])* "}";
		public ParserRule getRule() { return rule; }

		//"talk" name=ID "{" "speaker" speakers+=[Speaker|FQN] ("," speakers+=[Speaker|FQN])* "room" room=[Room|FQN] "tools"
		//tools+=[Tool|FQN] ("," tools+=[Tool|FQN])* "}"
		public Group getGroup() { return cGroup; }

		//"talk"
		public Keyword getTalkKeyword_0() { return cTalkKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"speaker"
		public Keyword getSpeakerKeyword_3() { return cSpeakerKeyword_3; }

		//speakers+=[Speaker|FQN]
		public Assignment getSpeakersAssignment_4() { return cSpeakersAssignment_4; }

		//[Speaker|FQN]
		public CrossReference getSpeakersSpeakerCrossReference_4_0() { return cSpeakersSpeakerCrossReference_4_0; }

		//FQN
		public RuleCall getSpeakersSpeakerFQNParserRuleCall_4_0_1() { return cSpeakersSpeakerFQNParserRuleCall_4_0_1; }

		//("," speakers+=[Speaker|FQN])*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//speakers+=[Speaker|FQN]
		public Assignment getSpeakersAssignment_5_1() { return cSpeakersAssignment_5_1; }

		//[Speaker|FQN]
		public CrossReference getSpeakersSpeakerCrossReference_5_1_0() { return cSpeakersSpeakerCrossReference_5_1_0; }

		//FQN
		public RuleCall getSpeakersSpeakerFQNParserRuleCall_5_1_0_1() { return cSpeakersSpeakerFQNParserRuleCall_5_1_0_1; }

		//"room"
		public Keyword getRoomKeyword_6() { return cRoomKeyword_6; }

		//room=[Room|FQN]
		public Assignment getRoomAssignment_7() { return cRoomAssignment_7; }

		//[Room|FQN]
		public CrossReference getRoomRoomCrossReference_7_0() { return cRoomRoomCrossReference_7_0; }

		//FQN
		public RuleCall getRoomRoomFQNParserRuleCall_7_0_1() { return cRoomRoomFQNParserRuleCall_7_0_1; }

		//"tools"
		public Keyword getToolsKeyword_8() { return cToolsKeyword_8; }

		//tools+=[Tool|FQN]
		public Assignment getToolsAssignment_9() { return cToolsAssignment_9; }

		//[Tool|FQN]
		public CrossReference getToolsToolCrossReference_9_0() { return cToolsToolCrossReference_9_0; }

		//FQN
		public RuleCall getToolsToolFQNParserRuleCall_9_0_1() { return cToolsToolFQNParserRuleCall_9_0_1; }

		//("," tools+=[Tool|FQN])*
		public Group getGroup_10() { return cGroup_10; }

		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }

		//tools+=[Tool|FQN]
		public Assignment getToolsAssignment_10_1() { return cToolsAssignment_10_1; }

		//[Tool|FQN]
		public CrossReference getToolsToolCrossReference_10_1_0() { return cToolsToolCrossReference_10_1_0; }

		//FQN
		public RuleCall getToolsToolFQNParserRuleCall_10_1_0_1() { return cToolsToolFQNParserRuleCall_10_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FQNWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQNWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FQNWithWildcard:
		//	FQN ".*"?;
		public ParserRule getRule() { return rule; }

		//FQN ".*"?
		public Group getGroup() { return cGroup; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	
	private ConferenceElements pConference;
	private ImportElements pImport;
	private TalkElements pTalk;
	private FQNElements pFQN;
	private FQNWithWildcardElements pFQNWithWildcard;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConferenceGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.eclipsecon.Conference".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Conference:
	//	"conference" name=ID "{" imports+=Import* location=[Location|FQN] talks+=Talk* "}";
	public ConferenceElements getConferenceAccess() {
		return (pConference != null) ? pConference : (pConference = new ConferenceElements());
	}
	
	public ParserRule getConferenceRule() {
		return getConferenceAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=FQNWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Talk:
	//	"talk" name=ID "{" "speaker" speakers+=[Speaker|FQN] ("," speakers+=[Speaker|FQN])* "room" room=[Room|FQN] "tools"
	//	tools+=[Tool|FQN] ("," tools+=[Tool|FQN])* "}";
	public TalkElements getTalkAccess() {
		return (pTalk != null) ? pTalk : (pTalk = new TalkElements());
	}
	
	public ParserRule getTalkRule() {
		return getTalkAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//FQNWithWildcard:
	//	FQN ".*"?;
	public FQNWithWildcardElements getFQNWithWildcardAccess() {
		return (pFQNWithWildcard != null) ? pFQNWithWildcard : (pFQNWithWildcard = new FQNWithWildcardElements());
	}
	
	public ParserRule getFQNWithWildcardRule() {
		return getFQNWithWildcardAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
